#! /bin/bash
startDir=$(pwd)
#
#This is a shell script for running the casapy.py script
#it's adapted from the mac python script and no doubt will
#be freely adjusted for linux.
#
#Set the location of the 3rd party software we will need
#
OSTYPE=$(uname -s)
if [ $OSTYPE="Darwin" ]; then
	isapple="T"
        OSVERS=$(uname -r | awk -F. '{print $1}')
        if [ $OSVERS -eq "10" ]; then
		casa3party="/opt/casa/darwin10-64b"
	fi
        if [ $OSVERS -eq "11" ]; then
		casa3party="/opt/casa/darwin11"
	fi
        if [ $OSVERS -eq "12" ]; then
		casa3party="/opt/casa/darwin12"
	fi
else 
	isapple="F"
	casa3party="/usr/lib/casapy"
fi



a_site="socorro"

if [[ -L "$0"  ]]; then
	real_me=$(stat -f %Y "$0")
	myDir=$(dirname "$real_me")
	echo -n '==>  '
else
	myDir=$(dirname "$0")
fi

_dorsync="T"
if [ "$1" = "--norsync" ]; then
	  _dorsync="F"
fi

_dodebug="F"
if [ "$1" = "--debug" ]; then
	  _dodebug="T"
fi

#prefix=$(dirname "${myDir}")
prefix=`echo ${CASAPATH} | awk '{printf "%s/%s", $1,$2}'`
#prefix=/opt/casa/active/darwinllvm
echo $prefix

a_root=`echo ${CASAPATH} | awk '{print $1}'`
a_host=$(hostname -s)
a_arch=`echo ${CASAPATH} | awk '{print $2}'`
a_site="${a_site}-${a_arch}"

echo "need to set python"
if [ $isapple = 'T' ]; then
   p_root=${casa3party}/Library/Frameworks/Python.framework/Versions/2.6
   export PYTHONEXECUTABLE=${p_root}/Resources/Python.app/Contents/MacOS/Python
   export TERMINFO="${casa3party}/lib/terminfo"
   unset  LD_LIBRARY_PATH
   export LC_CTYPE=sv_US.UTF-8
   export DYLD_FRAMEWORK_PATH="${casa3party}/Library/Frameworks"
else
   p_root=${casa3party}
   export PYTHONEXECUTABLE=${p_root}/bin/python
   export TERMINFO="/usr/share/terminfo"
fi
DEBUGGER="gdb"
p_bind=${p_root}/bin
p_libd=${p_root}/lib/python2.6
p_path=${p_bind}:${p_libd}:${p_libd}/plat-mac:${p_libd}/plat-darwin:${p_bind}/lib-scriptpackages:${p_libd}/lib-tk:${p_libd}/lib-dynload:${p_libd}/site-packages:${p_libd}/site-packages/Numeric:${p_libd}/site-packages/PyObjC

export   __CASAPY_PYTHONDIR=${prefix}/python/2.6
p_path=${__CASAPY_PYTHONDIR}:${p_path}


export PYTHONHOME=${p_root}
export PYTHONPATH=${p_path}
export CASAPATH="$a_root $a_arch $a_site $a_host"
echo ${CASAPATH}
export DISPLAY=${DISPLAY=:0.0}
export PATH="${p_root}/bin:/bin:/sbin:/usr/bin:/usr/sbin"
export PGPLOT_DIR="${casa3party}/lib"
export LESS=${LESS="-X"}
#
###### Technically, DYLD_LIBRARY_PATH should not need to be set
######  but somehow the inherited environment of the async processes
######  needs it to find Qt and friends.

if [ ${#PGPLOT_DIR} -gt 112 ]
then
	echo
	echo
	echo "======================================================================"
	echo
	echo "WARNING: The runtime for PGPLOT limits path lengths to 112 characters."
	echo "WARNING: The current CASA application location"
	echo "WARNING:   " ${prefix}
	echo "WARNING:     results in a path that is " ${#PGPLOT_DIR} " characters."
	echo "WARNING: You may experience problems with the CASA viewer and imager."
	echo "WARNING: Please exit CASA, then move the CASA application"
	echo "WARNING:  to /Applications and try again."
	echo
	echo "======================================================================"
	echo
	echo
fi

# Source possible local CASA initialization files.
for ci in \
	${a_root}/.casainit.sh \
	${a_root}/aips++local.sh \
	${a_root}/${a_arch}/aips++local.sh \
	${a_root}/${a_arch}/${a_site}/aips++local.sh \
	${a_root}/${a_arch}/${a_site}/${a_host}/aips++local.sh \
	${HOME}/.aips++local.sh \
	${HOME}/.casainit
do
  if  [ -r $ci ]; then
	$verbose && echo "sourcing $ci"
	. $ci
  fi
done


casapy_ddir=${a_root}/data
if (( ${#casapy_ddir} > 0 )); then
	mkdir -p "$casapy_ddir"
	cd "$casapy_ddir" && echo "=== cd: "$(pwd)" ==="
	if [ "$_dorsync" = "T" ]; then
	   echo "==================================="
	   echo "Updating data repository...."
	   rsync -avz rsync.aoc.nrao.edu::casadata . 2>/dev/null
	   echo "... data repository update complete"
	   echo "==================================="
        fi
	cd -
fi

#
# Here we check that both dbus launchctl processes are running, if not shutdown the orphan and proceed
#
if [ ${isapple} = "T" ]; then

_checkdbus=$(launchctl list | grep freedesktop | wc -l | tr -d ' ')
if [ "${_checkdbus}" -eq "1" ]; then
  _dbusctl=$(launchctl list | grep freedesktop | awk '{print $3}')
  launchctl remove ${_dbusctl}
fi
launchctl load /opt/casa/darwin11/Library/LaunchDaemons/org.freedesktop.dbus-system.plist
launchctl load /opt/casa/darwin11/Library/LaunchAgents/org.freedesktop.dbus-session.plist

if (( ${#casapy_wdir} > 0 )); then
	mkdir -p "$casapy_wdir"
	cd "$casapy_wdir" && echo "=== cd: "$(pwd)" ==="
	echo "==="
else
	cd $startDir
fi
casapy_opts=$(defaults read edu.nrao.casa.macosx.casapy casapy.opts 		2>/dev/null)
casapy_wdir=$(defaults read edu.nrao.casa.macosx.casapy casapy.working.dir 	2>/dev/null)
fi

echo
echo "========================================="
echo "The start-up time of CASA may vary"
echo "depending on whether the shared libraries"
echo "are cached or not."
echo "========================================="
echo


# This bit of code, copies the old casapy.log file to one with a 
# date string based on the last entry and then blows away the casapy.log
# after creating a hard link

if [[ -f casapy.log ]]; then
	ln casapy.log casapy.$(tail -n 1 casapy.log | cut -c 1-19 | tr ' ' T).log && rm casapy.log
fi





#exec -a pythonw /opt/casa/darwin11/bin/pythonw -W ignore::DeprecationWarning -m cProfile -o stats.prof ${prefix}/python/2.6/casapy.py $*
if [ ${_dodebug} = "T" ]; then
   echo "Debugger run command is: -W ignore::DeprecationWarning ${prefix}/python/2.6/casapy.py $*"
   exec -a ${DEBUGGER}  ${DEBUGGER} ${PYTHONEXECUTABLE}
else
   exec -a python ${PYTHONEXECUTABLE} -W ignore::DeprecationWarning ${prefix}/python/2.6/casapy.py $*
fi
