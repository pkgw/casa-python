<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/tools/xml/casa.xsd">


        <tool name="lightflagger" module="lightflagger">
<code>
	<include>tools/flagging/lightflagger_forward.h</include>
<private>
	<include>tools/flagging/lightflagger_private.h</include>
</private>
</code>

        <shortdescription>Tool for manual and automated flagging</shortdescription>
       
<description>
The {\tt lightflagger} tool performs manual as well as automatic flagging.
 The {\tt lightflagger} tool can operate on
one measurement set at a time.  
</description>

<!-- ********************************************************************** -->

   <method type="constructor" name="lightflagger">
   <shortdescription>Construct an flag tool </shortdescription>
   
<description>
Create an {\tt lightflagger} tool.
</description>
<input>
</input>
<returns type="unknown">lightflagger tool</returns>
<example>

lfg:=lightflagger()      

</example>
</method>


<!-- ********************************************************************** -->

   <method type="function" name="open">
   <shortdescription>Attaches tool to a measurement set.</shortdescription>
   
<description>
This function attaches the tool to a measurement set. If
a measurement set is already attached, it will first detach it, 
and then attach the tool to the new measurement set. 
</description>
<input>

     <param type="string" name="msname">
     <description>Measurement set to be processed</description>
     <value></value>
     </param>
</input>
<returns type="bool"/>
<example>

fg.open('3C273XC1.MS')

</example>
</method>

<!-- ********************************************************************** -->

 
   <method type="function" name="setdata">
   <shortdescription>Set the data selection parameters to define a
   subset of the data on which to perform any further selections/operations.
 For unspecified parameters, the full data range is assumed.
All data selection parameters follow the ms-selection syntax.
</shortdescription>
   
<description>
</description>

<input>

<!-- Selection parameters : start -->
     <param type="string" name="field">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value></value>
     </param>
     
     <param type="string" name="spw">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value></value>
     </param>
    
     <param type="string" name="array">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value></value>
     </param>
    
     <param type="string" name="feed">
     <description>Feed index or name : example : '1,2' </description>
     <value></value>
     </param>
    
     <param type="string" name="scan">
     <description>Scan number : example : '1,2,3' </description>
     <value></value>
     </param>
    
     <param type="string" name="baseline">
     <description>Baseline number : example : '2-3,4-5,132 ????' </description>
     <value></value>
     </param>
    
     <param type="string" name="uvrange">
     <description> UV-distance range, with a unit : example : '2.0-3000.0 m'</description>
     <value></value>
     </param>
    
     <param type="string" name="time">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value></value>
     </param>

     <param type="string" name="correlation">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value></value>
     </param>

<!-- Selection parameters : end -->
     
</input>
<returns type="bool"/> 
</method>
<!-- ********************************************************************** -->

<!-- ********************************************************************** -->

   <method type="function" name="getparameters">
   <shortdescription> Retrieve the current set of input parameters for a specified algorithm.
   \n This returns a python dictionary of parameters and their values.
   </shortdescription>
   
<description>
Retrieve the current set of input parameters for a specified algorithm.
</description>
<input>
   <param type="string" name="algorithm">
   <description>Autoflag Algorithm name</description>
   <value>timemed</value>
   <value>freqmed</value>
   <value>none</value>
   </param>

</input>
<returns type="record">record of default parameters</returns>
</method>

<!-- return type should be a record -->

<!-- ********************************************************************** -->

   <method type="function" name="setparameters">
   <shortdescription>Setup an autoflag algorithm.
   </shortdescription>
   
<description>
Setup an autoflag algorithm.
</description>
<input>
   <param type="string" name="algorithm">
   <description>Autoflag Algorithm name</description>
   <value>timemedian</value>
   <value>freqmedian</value>
   <value>spectralreject</value>
   <value>uvbin</value>
   <value>none</value>
   </param>

   <param type="record" name="parameters">
     <description>Parameters for each autoflag algorithm.

     </description>
     <value></value>
     </param>
</input>
<returns type="bool"/> 
</method>

<!-- ********************************************************************** -->


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

   <method type="function" name="run">
   <shortdescription>Executes a flagging run</shortdescription>
   
<description>
Executes a flagging run.
</description>
<input>

   <param type="record" name="parameters">
     <description>Generic parameters

     </description>
     <value></value>
     </param>

</input>
<returns type="record">record of flag statistics</returns>
<example>
</example>
</method>
 
<!-- ********************************************************************** -->


   <method type="function" name="done">
   <shortdescription>Destroys the flag tool</shortdescription>
   
<description>

This function destroys the flag tool.

</description>
<returns type="bool"/>
<example>
- fg.done()
T
-
</example>
</method>


 
<!-- ********************************************************************** -->


   <method type="function" name="saveflagversion">
   <shortdescription>*** \n Save current flags with a version name.*** 
   			</shortdescription>
<description> 
</description>
<input>
     <param type="string" name="versionname">
     <description>Version name </description>
     <value></value>
     </param>
     <param type="string" name="comment">
     <description>Comment for this flag table </description>
     <value></value>
     </param>
     <param type="string" name="merge">
     <description>merge type </description>
     <value></value>
     </param>
</input>
<returns type="bool"/>
</method>

 
<!-- ********************************************************************** -->

    <method type="function" name="restoreflagversion">
   <shortdescription>*** \n Restore flags from a saved flag_version. 
			\n versionname : name of flag version to restore to main table
			\n merge : Type of operation to perform during restoration.
			\n        merge = replace  : replaces the main table flags.
			\n        merge = and   : logical AND with main table flags
			\n        merge = or    : logical OR with main table flags
			\n        Default : replace.
 			  \n ***</shortdescription>
<description> 
</description>
<input>
     <param type="stringArray" name="versionname">
     <description>Version name </description>
     <value></value>
     </param>
     <param type="string" name="merge">
     <description>merge type </description>
     <value></value>
     </param>
</input>
<returns type="bool"/>
</method>

 
<!-- ********************************************************************** -->


    <method type="function" name="deleteflagversion">
   <shortdescription>*** \n Delete a saved flag_version. 
 			   ***</shortdescription>
<description> 
</description>
<input>
     <param type="stringArray" name="versionname">
     <description>Version name </description>
     <value></value>
     </param>
</input>
<returns type="bool"/>
</method>
 
<!-- ********************************************************************** -->

    <method type="function" name="getflagversionlist">
   <shortdescription>*** \n Print out a list of saved flag_versions. 
 			  ***</shortdescription>
<description> 
Print out the list of flag versions in the MS, unless the parameter printflags=False. The list of names is returned.
</description>
<input>
     <param type="bool" name="printflags">
     <description>Print flagversions in logger?</description>
     <value>true</value>
     </param>
</input>
<returns type="stringArray"/>
</method>

 
<!-- ********************************************************************** -->



</tool>

</casaxml>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->





