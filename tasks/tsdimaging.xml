<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


<!-- This is the param set for sdimaging -->

<task type="function" name="tsdimaging" startup="false" category="single dish" visibility="experimental">

  <shortdescription>SD task: imaging for total power and spectral data</shortdescription>

  <description>
Task sdimaging create image from input single-dish data.
The input can be either total power and spectral data. Currently,
this task directly accesses the Measurement Set data only because of 
the data access efficiency. So it differs from other single-dish 
tasks that mostly operate on the ASAP scantable data format.
  </description>

  <input>
    <param type="stringArray" name="infiles"  mustexist="true">
            <description>a list of names of input MSes (only MS is allowed for this task)</description>
            <value></value>
    </param>

    <param type="string" name="outfile">
	    <description>output image name</description>
	    <value></value>
    </param>

    <param type="bool" name="overwrite">
            <description>overwrite option</description>
            <value>False</value>
    </param>

    <param type="any" name="field">
	    <description>string for selection by field name or id</description>
	    <any type="variant" limittypes="string stringArray"/>
            <value type="string"></value>
    </param>

    <param type="any" name="spw">
            <description>Spectral windows e.g. \'0~3\', (\'\'=all)</description>
            <any type="variant" limittypes="string stringArray"/>
            <value type="string"></value>
    </param>

    <param type="any" name="antenna">
            <description>antenna name(s) or id(s) (e.g., 0, \'PM03\') (\'\' = all antennas)</description>
            <any type="variant" limittypes="string stringArray"/>
            <value type="string"></value>
    </param>

    <param type="any" name="scan">
            <description>Scan number range</description>
            <description>Scan number range, e.g., \'21~24\' (\'\'=all)</description>
            <any type="variant" limittypes="string stringArray"/>
            <value type="string"></value>
    </param>

    <param type="string" name="mode">
            <description>Spectral gridding type</description>
            <shortdescription>Spectral gridding type [\'channel\', \'frequency\', \'velocity\']</shortdescription>
            <value>channel</value> 
            <allowed kind="enum">
                    <value>channel</value>
                    <value>frequency</value>
                    <value>velocity</value>
           </allowed>
    </param>

    <param type="int" name="nchan" subparam="true">
            <description> Number of channels (planes) in output image; -1 = all</description>
            <value>-1</value>
    </param>

    <param type="any" name="start" subparam="true">
            <description>start of output spectral dimension</description>
	    <any type="variant"/>
	    <value type="int">0</value>
    </param>

    <param type="any" name="step" subparam="true">
            <description>width of output spectral channels</description>
	    <any type="variant"/>
	    <value type="int">1</value>
    </param>

    <param type="string" name="veltype" ignorecase="true"  subparam="true">
            <shortdescription>velocity definition [\'radio\'|\'optical\'|\'true\'|\'relativistic\'] </shortdescription>
            <description>velocity definition</description>
            <value>radio</value>
            <allowed kind="enum">
                    <value>radio</value>
                    <value>optical</value>
                    <value>true</value>
                    <value>relativistic</value>
           </allowed>
    </param>

    <param type="string" name="outframe" ignorecase="true">
            <shortdescription>velocity frame of output image [\'lsrk\'|\'lsrd\'|\'bary\'|\'geo\'|\'topo\'|\'galacto\'|\'lgroup\'|\'cmb\'] (\'\'=current frame or LSRK for multiple-MS inputs) </shortdescription>
            <description>velocity frame of output image (''=current frame or LSRK for multiple-MS inputs)</description>
            <value></value>
            <allowed kind="enum">
                    <value>lsrk</value>
                    <value>lsrd</value>
                    <value>bary</value>
                    <value>geo</value>
                    <value>topo</value>
                    <value>galacto</value>
                    <value>lgroup</value>
                    <value>cmb</value>
                    <value></value>
           </allowed>
    </param>

    <param type="string" name ="gridfunction">
            <shortdescription>gridding function for imaging [\'BOX\'|\'SF\'|\'PB\'|\'GAUSS\'|\'GJINC\']</shortdescription>
            <description>gridding function for imaging</description>
            <value>BOX</value>
            <allowed kind="enum">
                <value>BOX</value>
                <value>PB</value>
                <value>SF</value>
                <value>GAUSS</value>
                <value>GJINC</value>
                <value>box</value>
                <value>pb</value>
                <value>sf</value>
                <value>gauss</value>
                <value>gjinc</value>
            </allowed>
    </param>

    <param type="int" name="convsupport" subparam="true">
            <description>convolution support for gridding</description>
            <value>-1</value>
    </param>

    <param type="any" name="truncate" subparam="true">
            <description>truncation radius for gridding</description>
            <any type="variant" limittypes="string int double"/>
            <value type="int">-1</value>
    </param>

    <param type="any" name="gwidth" subparam="true">
            <description>HWHM for gaussian</description>
            <any type="variant" limittypes="string int double"/>
            <value type="int">-1</value>
    </param>

    <param type="any" name="jwidth" subparam="true">
            <description>c-parameter for jinc function</description>
            <any type="variant" limittypes="string int double"/>
            <value type="int">-1</value>
    </param>

    <param type="intArray" name="imsize">
            <description>x and y image size in pixels, symmetric for single value (e.g., [128,128])</description>
            <value type="vector">
            </value>
    </param>

    <param type="any" name="cell">
    <description>x and y cell size (e.g., [\'30arcsec\',\'30arcsec\']). default unit arcmin</description>
    <any type="variant" limittypes="string stringArray doubleArray"/>
    <value type="string"></value>
    </param>

    <param type="any" name="phasecenter">
            <description>Image phase center: position or field index (e.g., \'J2000 17:30:15.0 -25.30.00.0\')</description>
            <any type="variant"/>
            <value type="string"></value>
    </param>

    <param type="string" name="ephemsrcname">
	    <description>ephemeris source name</description>
	    <value></value>
    </param>

    <param type="string" name="pointingcolumn">
            <shortdescription>pointing data column to use [\'direction\'|\'target\'|\'pointing_offset\'|\'source_offset\'|\'encoder\']</shortdescription>
            <description>pointing data column to use</description>
            <value>direction</value>
            <allowed kind="enum" ignorecase="True">
                <value>target</value>
                <value>pointing_offset</value>
                <value>source_offset</value>
                <value>encoder</value>
                <value>direction</value>
            </allowed>
    </param>

    <param type="any" name="restfreq">
            <description>rest frequency (e.g., \'114.5GHz\')</description>
            <any type="variant" limittypes="string double"/>
            <value type="string"/>
    </param>

    <param type="string" name="stokes">
            <description>stokes or correlation name (e.g. \'I\', \'XX\')</description>
            <value></value>
    </param>

    <param type="double" name="minweight">
            <shortdescription>Minimum weight ratio to use</shortdescription>
            <description>Minimum weight ratio to the median of weight used in weight correction and weight beased masking</description>
            <allowed kind="range"> <value range="min">0</value> </allowed>
            <value>0.1</value>
    </param>
   

    <constraints>
            <when param="mode">
                <equals value="channel">
                    <default param="nchan"><value>-1</value></default>
                    <default param="start"><value type="string"></value>
		        <description>Begin the output cube at the frequency of this channel in the MS</description>
                    </default>
                    <default param="step"><value type="string"></value>
                        <description>Width of output channel relative to MS channel (# to average)(\'\' = 1 channel) </description>
                    </default>
                </equals>
                <equals value="frequency">
                    <default param="nchan"><value>-1</value></default>
                    <default param="start"><value type="string"></value>
		        <description>Frequency of first channel: e.g. \'1.4GHz\' (\'\'= first channel in first SpW of MS)</description>
                    </default>
                    <default param="step"><value type="string"></value>
                        <description>Channel width: e.g \'1.0kHz\'(\'\'=width of first channel in first SpW of MS)</description>
                    </default>
                </equals>
                <equals value="velocity">
                    <default param="nchan"><value>-1</value></default>
                    <default param="start"><value type="string"></value>
		        <description>Velocity of first channel: e.g \'0.0km/s\'(\'\'=first channel in first SpW of MS)</description>
                    </default>
                    <default param="step"><value type="string"></value>
                        <description>Channel width e.g \'-1.0km/s\' (\'\'=width of first channel in first SpW of MS)</description>
                    </default>
                    <default param="veltype"><value type="string">radio</value></default>
                </equals>
            </when>
            <when param="gridfunction">
                <equals type="string" value="BOX"/>
                <equals type="string" value="box"/>
                <equals type="string" value="SF">
                    <default param="convsupport"><value type="int">-1</value></default>
                </equals>
                <equals type="string" value="sf">
                    <default param="convsupport"><value type="int">-1</value></default>
                </equals>
                <equals type="string" value="PB"/>
                <equals type="string" value="pb"/>
                <equals type="string" value="GAUSS">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                </equals>
                <equals type="string" value="gauss">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                </equals>
                <equals type="string" value="GJINC">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                    <default param="jwidth"><value type="int">-1</value></default>
                </equals>
                <equals type="string" value="gjinc">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                    <default param="jwidth"><value type="int">-1</value></default>
                </equals>
            </when>
    </constraints>
  </input>

  <returns type="void"/>

  <example>
  Keyword arguments:
        infiles -- a list of names of input SD (MS) datasets
                example: 'm100.PM01.ms'
                         ['m100.PM01.ms','m100.PM03.ms']; multiple MSes
        outfile -- output image name
                default: none
                example: 'mySDimage.im'
        overwrite -- overwrite option for outfile
                default: False (not overwrite)
                options: True, False
                example: if True, existing file will be overwritten
        field -- field id or selection string for selecting scans by name
                default: -1 (all fields)
                example: 'FLS3a', 0
                this selection is in addition to scanlist and spw
        spw -- a list of spectral window id
                default: 0
                example: 1
                         [1, 3, 5]
                this selection is in addition to scanlist and field
        antenna -- select data based on antenna name(s) or id(s)
                default: -1 (all baselines, i.e. all antenna in case of auto data)
                example: 0, 'DV01'
        scan -- list of scan numbers to process
                default: [] (use all scans)
                example: [21,22,23,24]
                this selection is in addition to field and spw
        mode -- spectral gridding type
                default: 'channel'
                options: 'channel', 'velocity', 'frequency'
            &gt;&gt;&gt; mode expandable parameters
               nchan -- number of spectral channel for created image
                   default: 1 
                   example: 100
               start -- reference value of start channel (in units of specunit)
                   default: 0 (0th channel if specunit='channel')
                   example: 100
               step -- width of each spectral channel for created image
                   default: 1 (width of 1 channel if specunit='channel')
                   example: 100
               veltype -- Velocity reference frame of output image
                   Options: 'radio','optical','true','relativistic'
                   default: 'radio'
        outframe -- Velocity reference frame of output image
                Options: '','LSRK','LSRD','BARY','GEO','TOPO','GALACTO',
                         'LGROUP','CMB'
                default: ''; same as input data or 'LSRK' for multiple-MS inputs
                example: frame='bary' for Barycentric frame 
        gridfunction -- gridding function for imaging
                options: 'BOX' (Box-car), 'SF' (Spheroidal), 
                         'PB' (Primary-beam), 'GAUSS' (Gaussian),
                         'GJINC' (Gaussian*Jinc)
                default: 'BOX'
                example: 'SF'
            &gt;&gt;&gt; gridfunction expandable parameter:
               convsupport -- convolution support for 'SF' 
                   default: -1 (use default for each gridfunction)
                   example: 3
               truncate -- truncattion radius of convolution kernel.
                           effective only for 'GAUSS' and 'GJINC'.
                   default: '-1' (use default for each gridfunction)
                   example: 3, '20arcsec', '3pixel'
               gwidth -- HWHM for gaussian. Effective only for 
                         'GAUSS' and 'GJINC'.
                   default: '-1' (use default for each gridfunction)
                   example: 3, '20arcsec', '3pixel'
               jwidth -- Width of jinc function. Effective only for 
                         'GJINC'.
                   default: '-1' (use default for each gridfunction)
                   example: 3, '20arcsec', '3pixel'
        imsize -- x and y image size in pixels, symmetric for single value
                default: [] (=cover all pointings in MS)
                example: imsize=200 (equivalent to [200,200])
        cell -- x and y cell size. default unit arcmin
                default: '' (= 1/3 of FWHM of primary beam)
                example: cell=['0.2arcmin, 0.2arcmin']
                         cell='0.2arcmin' (equivalent to example above)
        phasecenter -- image phase center: direction measure or field id 
                default: '' (= the center of pointing directions in 
                             POINTING table of infiles)
                example: 6 (field id), 'J2000 13h44m00 -17d02m00',
                         'AZEL -123d48m29 15d41m41'
        ephemsrcname -- ephemeris source name for moving source
                default: ''
                if the source name in the data matches one of the known 
                solar objects by the system, this task automatically set 
                the source name. 
                example: 'moon' 
        pointingcolumn -- pointing data column to use
                option: 'direction', 'target', 'pointing_offset', 'source_offset', 'encoder' 
                default: 'direction'
        restfreq -- rest frequency
                default: '' (refer input data)
                example: 1.0e11, '100GHz'
        stokes -- select data based on stokes or polarization type 
                default: '' (use all polarizations)
                example: 'XX'
        minweight -- Minimum weight ratio to the median of weight used in 
                     weight correction and weight based masking
                default: 0.1
                example: minweight = 0.


        DESCRIPTION:

        Units of spectral axis can be specified via a parameter specunit.
        Allowed values for specunit are 'channel', 'GHz', 'MHz', 'kHz', 'Hz', 
        and 'km/s'. This parameter is also used as the units of the parameter 
        start and step that specify reference value of start channel and 
        width of each spectral channel for channel map, respectively. 
        The parameter nchan specifies number of channels for created image. 
        If you set nchan as -1, the task selects existing all channels and 
        combine those data into one channel to create continuum image.

        You can specify field id or name directly. By default, field is set 
        to -1 that means the task selects all fields in the data.

        Selection of the antennas can be made by setting antennaid(s) or 
        antenna name(s) in string (e.g. '0', 'DV01',etc.) or integer 
        (e.g. 0). Defalut value, -1, means that the task selects data from 
        all baseline, i.e., data from all antenna when data only contains 
        auto-correlation.

        The parameter gridfunction sets gridding function for imaging. 
        Currently, the task supports 'BOX' (Box-car), 'SF' (Prolate 
        Spheroidal Wave Function), 'GAUSS' (Gaussian), 'GJINC' (Gaussian*
        Jinc), where Jinc(x) = J_1(pi*x/c)/(pi*x/c) with a first order 
        Bessel function J_1, and 'PB' (Primary Beam). For 'PB', correct 
        antenna informations should be included in input file. 

        There are four subparameters for gridfunction: convsupport, truncate, 
        gwidth, and jwidth. The convsupport is an integer specifying cut-off 
        radius for 'SF' in units of pixel. By default (convsupport=-1), 
        the cut-off radius is set to 3 pixels. The truncate is a cut-off 
        radius for 'GAUSS' or 'GJINC'. It accepts integer, float, and 
        string values of numeric plus unit. Allowed units are angular 
        units such as 'deg', 'arcmin', 'arcsec', and 'pixel'. Default unit 
        is 'pixel' so that string without unit or numerical values (integer 
        or float) will be interpreted as radius in pixel. Default value 
        for truncate, which is used when negative radius is set, is 3*HWHM 
        for 'GAUSS' and radius at first null for 'GJINC'. The gwidth is 
        the HWHM of gaussian for 'GAUSS' and 'GJINC'. Default value is 
        sqrt(log(2)) pixel for 'GAUSS' and 2.52*sqrt(log(2)) pixel for 
        'GJINC'. The jwidth specifies width of the jinc function (parameter 
        'c' in the definition above). Default is 1.55 pixel. Both gwidth 
        jwidth allows integer, float, or string of numeric plus unit. 
        Default values for gwidth and jwidth are taken from Mangum et al. 
        (2007). Formula for 'GAUSS' and 'GJINC' are taken from Table 1 in 
        the paper, and are written as below using gwidth and jwidth: 

           GAUSS: exp[-log(2)*(|r|/gwidth)**2]

           GJINC: J_1(pi*|r|/jwidth)/(pi*|r|/jwidth)
                     * exp[-log(2)*(|r|/gwidth)^2]  


        Reference: Mangum, et al. 2007, A&amp;A, 474, 679-687 

        The parameter minweight defines a threshold of weight values 
        to mask. The pixels in outfile whose weight is smaller than
        minweight*median(weight) are masked out. The task also creates
        a weight image with the name outfile.weight.

  </example>

</task>

</casaxml>
