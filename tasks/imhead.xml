<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>

<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


<!-- Copyright (C) 2008                                                -->
<!-- Associated Universities, Inc. Washington DC, USA.                 -->
<!--                                                                   -->
<!-- This library is free software; you can redistribute it and/or     -->
<!-- modify it under the terms of the GNU Library General Public       -->
<!-- License as published by the Free Software Foundation; either      -->
<!-- version 2 of the License, or (at your option) any later version.  -->
<!--                                                                   -->
<!-- This library is distributed in the hope that it will be useful,   -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of    -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU -->
<!-- Library General Public License for more details.                  -->
<!--                                                                   -->
<!-- You should have received a copy of the GNU Library General Public -->
<!-- License along with this library; if not, write to the Free        -->
<!-- Software Foundation,Inc.,675 Massachusetts Ave,Cambridge, MA 02139, USA.-->
<!--                                                                   -->
<!-- Correspondence concerning AIPS++ should be adressed as follows:   -->
<!--        Internet email: aips2-request@nrao.edu.                    -->
<!--        Postal address: AIPS++ Project Office                      -->
<!--                        National Radio Astronomy Observatory       -->
<!--                        520 Edgemont Road                          -->
<!--                        Charlottesville, VA 22903-2475 USA         -->
<!-- ***************************************************************** --> 
<!-- ***************************************************************** --> 
<!-- This is the param set the imhead task                             -->
<!-- This is similar to the AIPS imhead, gethead, and puthead          -->
<!-- This does the equivalent of                                       -->
<!-- ia.open('anyfile.im');                                            -->
<!-- ia.summary();                       # summary mode                -->
<!-- tb.open('anyfile.im',nomodify=False)                              -->
<!-- tb.getcolkeywords()                                               -->
<!-- Extraction of all header            # list mode                   -->
<!-- List history contents (ia.history)  # history mode                -->
<!-- Add a new keyword or coordinate     # add mode                    -->
<!-- tb.putcolkeywords(value=newValue)   # put mode                    -->
<!-- Delete a new keyword or coordinate  # del mode                    -->
<!-- print/return( value )               # get mode                    -->
<!-- ***************************************************************** --> 
<!-- ***************************************************************** --> 
<!-- See task_imhead.py for detailed description of the                -->
<!-- imhead task.                                                      -->
<!-- ***************************************************************** --> 
<!-- ***************************************************************** --> 

<task type="function" name="imhead" category="analysis, information, manipulation">

<shortdescription>List, get and put image header parameters</shortdescription>


<input>
    <param type="string" name="imagename" mustexist="true" >
    	<description>Name of the input image</description>
    	<value></value>
        <example>imagenam='ngc5921_task.image'</example>
    </param>

    <param type="string" name="mode" >
	<description>imhead options: add, del, get, history, list, put, summary </description>
	<allowed kind="enum">
	    <value>list</value>
            <value>fits</value>
            <value>history</value>
	    <value>get</value>
	    <value>put</value>
	    <value>add</value>
	    <value>del</value>
	    <value>summary</value>
    	</allowed>
        <value>summary</value>
    </param>
    <param type="string" name="hdkey" subparam="yes">
    	<description>The FITS keyword</description>
        <value></value>
        <example>hdkey'telescope'</example>
    </param>

    <param type="any" name="hdvalue" subparam="yes">
	<any type="variant"/>
    	<description>Value of keyword</description>
        <value type="string"></value>
        <example>hdvalue='VLA'</example>
    </param>

    <param type="string" name="hdtype" subparam="yes">
    	<description>Data type of the header keyword.</description>
	<allowed kind="enum">
	    <value>bool</value>
            <value>int</value>
            <value>string</value>
	    <value>double</value>
	    <value>complex</value>
            <value></value>
    	</allowed>
        <value></value>
        <example>hdkey='telescope'</example>
    </param>

    <param type="string" name="hdcomment" subparam="yes">
    	<description>Comment associated with the header keyword</description>
        <value type="string"></value>
        <example>hdvalue='VLA'</example>
    </param>
    <param type="bool"  name="verbose" subparam="yes">
        <description>Give a full listing of beams or just a short summary? Only used when the image has multiple beams and mode="summary".</description>
        <value>False</value>
    </param>

    <constraints>
	<when param="mode">
  	    <equals value="summary">
            <default param="verbose"><value>False</value></default>
        </equals>
  	    <equals value="list"/>
  	    <equals value="history"/>
  	    <equals value="fits"/>

	    <equals value="put">
		<default param="hdkey"><value type="string"></value></default>
		<default param="hdvalue"><value type="string"></value></default>
		<default param="hdtype"><value type="string"></value></default>
		<default param="hdcomment"><value type="string"></value></default>	    </equals>

	    <equals value="add">
		<default param="hdkey"><value type="string"></value></default>
		<default param="hdvalue"><value type="string"></value></default>
		<default param="hdtype"><value type="string"></value></default>
		<default param="hdcomment"><value type="string"></value></default>
	    </equals>

	    <equals value="get">
		<default param="hdkey"><value type="string"></value></default>
	    </equals>

	    <equals value="del">
		<default param="hdkey"><value type="string"></value></default>
	    </equals>
	</when>
    </constraints>
</input>

<returns type="variant" limittypes="string double void" />

<example>

This task allows the user to manipulate metadata associated with an
image.  The supported mode values are:

add       Add a new metadata value to the image.
del       Delete a key or reset its value to a fidicual value if possible.
          Ignores all but imagename, mode, and hdkey parameters.
get  -    Return the specified keyword value. Ignores all but imagename, mode, and hdkey parameters.
history   Log image history. Ignores all but imagename and mode parameters.
list      Show supported keywords and their values. Ignores all but imagename and mode parameters.
put       Modify the specified value associated with the keyword.
summary   Log a summary of the image. 

See below for details about how these modes act for specific keywords.

NOTE: Only limited checking is implemented to ensure modifying a specific value
will leave the image in a consistent state, so, if one is not careful, one could
end up with an image that has an inconsistent set of metadata and is therefore,
nonsensical and unusable. That is, PROCEED AT YOUR OWN RISK.

NOTE: For measurement sets, the task vishead should be used.

Supported keywords can be listed using mode = 'list'

beammajor/bmaj	Major axis of the clean beam
beamminor/bmin  Minor axis of the clean beam
beampa/bpa      Position angle of the clean beam
    NOTE: If the image contains multiple beams, use mode="summary" to list them.
bunit	        Image units (K, Jy/beam, etc)
cdeltn	        Pixel size, nth axis. n is one-based.
crpixn	        Reference pixel of nth axis. n is one-based.
crvaln	        Reference value of nth axis. n is one-based.
ctypen	        Name of nth axis. n is one-based.
cunitn	        Units of nth axis. n is one based.
datamax         Maximum pixel value.
datamin         Minimum pixel value.
date-obs	    Date (epoch) of the observation.
equinox         Direction reference frame.
imtype          Image type (eg Intensity)
minpos          World coordinate position of minimum pixel value.
minpixpos       Pixel coordinate position of minimum pixel value.
maxpos          World coordinate position of maximum pixel value.
maxpixpos       Pixel coordinate position of maximum pixel value.
object	        Source name
observer	    Observer name
projection	    Direction coordinate projection (eg 'SIN','TAN', or 'ZEA').
reffreqtype     Spectral reference frame.
restfreq        Rest Frequency.
shape           Number of pixels along each axis.
telescope	    Telescope name.

PARAMETER SUMMARY

imagename   Input image name. example: imagename='ngc5921_task.image'
mode        Mode of operation. Supoorted values: 'list', 'summary', 'history',
            'get', 'put', 'add',  'del'.
            NOTE:  'add', 'del', and put should be used with caution.
hdkey       Keyword to use with get, put, add, or del. example: hdkey='telescope'
hdvalue     keyword value used for modes "put" and "add". Also used for mode="del" when
            hdvalue="masks. example: hdvalue='VLA'
hdcomment   Comment to be stored with the keyword for mode='put' or mode='add'
        
NOTES on mode="del"
The behavior of mode="del" depends on the keyword. Below is a summary of the per keyword
behavior of this mode. In general, the return value will be True if the operation succeeds,
or False if it fails or is not supported. If unsuccessful or not supported, a warning message
is normally logged which describes the failure.

Keyword                Behavior for mode="del"

beammajor or bmaj      Deletes all beams. Returns False if the image has no beams.
beamminor or bmin      Deletes all beams. Returns False if the image has no beams.
beampa or bpa          Deletes all beams. Returns False if the image has no beams.
bunit                  Sets the associated value to the empty string.
cdelt*                 No effect. Deletion of coordinate system parameters is not supported.
crpix*                 No effect. Deletion of coordinate system parameters is not supported.
crval*                 No effect. Deletion of coordinate system parameters is not supported.
ctype*                 No effect. Deletion of coordinate system parameters is not supported.
cunit*                 No effect. Deletion of coordinate system parameters is not supported.
datamax                No effect. Deletion of statistical parameters is not supported.
datamin                No effect. Deletion of statistical parameters is not supported.
date-obs               No effect.
equinox                No effect.
imtype                 No effect.
masks                  Deletes the single mask specified in hdvalue, or if hdvalue="", deletes all masks.
maxpos                 No effect. Deletion of statistical parameters is not supported.
maxpixpos              No effect. Deletion of statistical parameters is not supported.
minpos                 No effect. Deletion of statistical parameters is not supported.
minpixpos              No effect. Deletion of statistical parameters is not supported.
object                 Sets the associated value to the empty string.
observer               Sets the associated value to the empty string.
projection             No effect.
reffreqtype            No effect.
restfreq               No effect.
shape                  No effect.
telescope              Sets the associated value to the empty string.
any user defined key   Deletes the key-value pair.

NOTES ON mode='get'
The data type of the value returned by imhead when mode='get' depends on the keyword. Below
is a list of keywords on the data type that will be returned when mode='get' for each. A 
"quantity dictionary" is a dictionary with 'value' and 'unit' keys that can be used as
input to various methods of the qa tool.

keyword                data type returned when mode='get'

beammajor              quantity dictionary
beamminor              quantity dictionary
beampa                 quantity dictionary
bmaj                   quantity dictionary
bmin                   quantity dictionary
bpa                    quantity dictionary
bunit                  string
cdelt*                 quantity dictionary
crpix*                 float
crval*                 quantity dictionary
ctype*                 string
cunit*                 string
datamax                image pixel data type
datamin                image pixel data type
date-obs               string (YYYY/MM/DD/hh:mm:ss format)
equinox                string
imtype                 string
masks                  string array
maxpos                 string
maxpixpos              integer array
minpos                 string
minpixpos              integer array
object                 string
observer               string
projection             string
reffreqtype            string
restfreq               quantity dictionary
shape                  integer array
telescope              string
any user defined key   string

EXAMPLES
		  hdkey='date-obs';hdvalue='2007/06/20/00:00:00'
		  hdkey='beammajor';hdvalue='55arcsec'
                  hdkey='beampa'';hdvalue='0deg'
		  hdkey='restfrequency';hdvalue='1.421GHz'
		  hdkey='restfrequency';hdvalue='1.421GHz, 115.272GHz'
		  hdkey='projection';hdvalue='TAN'
		  hdkey='cdelt4';hdvalue=24415.05
		  hdkey='cdelt1';hdvalue='7.75e-5deg'
		  hdkey='crval1';hdvalue=qa.quantity( '763180', 'arsec')
		  hdkey='crval1';hdvalue='14:07:58'
		  hdkey='crval4';hdvalue='6250000Hz'

        hdtype    --- Used only with 'add' mode.  It is the data type that
                           is used to store the hdkey.  It can not be used to
                           change the data type of an exiting keyword.
                      options: bool, int, string, doubple, complex
                      default: none; example hdtype='double'


        Note that hdvalue will contain numbers, strings as well as units.
        
        If mode="summary", verbose=True and the image contains multiple beams, the output,
        will contain information on every beam in the dataset. If mode="summary",
        verbose=False and the image has multiple beams, only a brief summary of
        beams for each polarization is listed. In this
        case, the beams with the maximum area, the minimum area, and the median area for
        each polarization are listed. If mode is not "summary" and/or the image does not
        have multiple beams, verbose is not used.
        
        Examples:

        1)  get the clean beam from one image and put it in a second image

           Get the clean beam from image1 into hdvalue
                imagename = 'image1.im'; mode = 'get'; hdkey = 'beam'
                hdvalue = imhead()
                print hdvalue   #  to see values



        2)  The use of put is a bit more straight-forward

               mode = 'put'; hdkey = 'crpix1'; hdvalue = '200'; imhead()
        


</example>

</task>

</casaxml>

